"""
Django settings for AUTO_WEBSITE project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from corsheaders.defaults import default_headers
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'media')
MEDIA_URL = '/media/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', 'localhost:8080', 'host.docker.internal', 'host.docker.internal:3000', os.getenv('NGROK_API_URL')]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'AUTO_WEBSITE_ECOMMERCE',
    'phonenumber_field',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'corsheaders'
    # 'dj_rest_auth',
    # 'allauth',
    # 'allauth.account',
    # 'dj_rest_auth.registration',
]

MIDDLEWARE = [
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'AUTO_WEBSITE_ECOMMERCE.middleware.auth_token'
    # 'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'AUTO_WEBSITE.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': False,
        'OPTIONS': {
            'loaders': [
                (
                    'django.template.loaders.filesystem.Loader',
                    [BASE_DIR / 'media' / 'tmp' / 'html' / 'otp']
                ),
            ],
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.getenv('REDIS_DB1'),
        'TIMEOUT': None,
    }
}

# STORAGES = {
#     'default': {
#         'BACKEND': 'django.core.files.storage.FileSystemStorage',
#         'OPTIONS': {
#             'location': os.path.join(os.path.dirname(BASE_DIR), 'media'),
#             'base_url': '/media/',
#         }
#     }
# }

WSGI_APPLICATION = 'AUTO_WEBSITE.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'AUTO_WEBSITE_ECOMMERCE.UserLogin'
AUTHENTICATION_BACKENDS = [
    'AUTO_WEBSITE_ECOMMERCE.models.EmailBackend',
]

# ACCOUNT_USER_MODEL_USERNAME_FIELD = None
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_UNIQUE_EMAIL = True
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# ACCOUNT_CONFIRM_EMAIL_ON_GET = True
# ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/?verification=1'
# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/?verification=1'

# AUTHENTICATION_BACKENDS = ['users.auth_backends.EmailBackend']

SITE_ID = 1
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'LOGS/django_log.log',
            'maxBytes': 17000
        }
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        }
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata',
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter',
    ),
    'SEARCH_PARAM': 'filter[search]',
    'TEST_REQUEST_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json'
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_COOKIE_AGE = 86400
SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = True

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8080', 'http://host.docker.internal:3000', os.getenv('NGROK_FRONTEND_URL'), os.getenv('NGROK_ADMIN_URL') 
]

# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    'ngrok-skip-browser-warning',
    'Set-Cookie'
]

CORS_ALLOW_CREDENTIALS = True

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# TWILIO INTEGRATION SETTINGS
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_MOBILE_NO = os.getenv('TWILIO_MOBILE_NO')

# SAGE INTEGRATION SETTINGS
SAGE_API_KEY = os.getenv('SAGE_TEST_API_KEY')
SAGE_USERNAME = os.getenv('SAGE_USERNAME')
SAGE_PASSWORD = os.getenv('SAGE_PASSWORD')
SAGE_URL = os.getenv('SAGE_URL')
SAGE_VER = os.getenv('SAGE_VER')

# Email Setting (user created)
# dev note: this is temporarily commented out as I am using
# an external api to send emails!
# MAILJET_API_KEY = os.getenv('MAILJET_API_KEY')
# MAILJET_SECRET_KEY = os.getenv('MAILJET_SECRET_KEY')
# EMAIL_HOST = os.getenv('EMAIL_HOST')
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
# EMAIL_PORT = os.getenv('EMAIL_PORT')
# EMAIL_USE_SSL = True
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

MAILER_SEND_API_KEY = os.getenv('MAILER_SEND_API_KEY')

# BOBGO INTEGRATION SETTINGS
BOBGO_API_KEY = os.getenv('BOBGO_API_KEY')
BOBGO_URL = os.getenv('BOBGO_URL')
BOBGO_DEFAULT_COLLECTION_ADDRESS = {
    'company': 'Autolectronix',
    'name': 'Autolectronix Admin',
    'contact_number': '0317001420',
    'email_address': 'office@autolectronix.co.za',
    'street_address': '4 Ivy Road',
    'local_area': 'Pinetown CBD',
    'city': 'Durban',
    'zone': 'KZN',
    'code': '3610'
}
BOBGO_DEFAULT_HEADERS = {
    'Authorization': f'Bearer {os.getenv("BOBGO_API_KEY")}',
    'Content-Type': 'application/json'
}

# PAYFAST INTEGRATION SETTINGS
PAYFAST_ID = os.getenv('PAYFAST_ID')
PAYFAST_KEY = os.getenv('PAYFAST_KEY')
PAYFAST_PASS_PHRASE = os.getenv('PAYFAST_PASS_PHRASE')

# CELERY SETTINGS
CELERY_BROKER_URL = os.getenv('REDIS_DB2')
CELERY_RESULT_BACKEND = os.getenv('REDIS_DB3')
CELERY_TIMEZONE = os.getenv('CELERY_TIMEZONE')

GC_URL = os.getenv('GC_URL')
GC_API_KEY = os.getenv('GC_API_KEY')
GC_VER = os.getenv('GC_VER')

API_URL = os.getenv('NGROK_API_URL')
FRONTEND_URL = os.getenv('NGROK_FRONTEND_URL')
ADMIN_URL = os.getenv('NGROK_ADMIN_URL')